% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Contours.R
\name{TernaryContour}
\alias{TernaryContour}
\title{Add contours to a ternary plot}
\usage{
TernaryContour(
  Func,
  resolution = 96L,
  direction = getOption("ternDirection", 1L),
  ...
)
}
\arguments{
\item{Func}{Function taking vectors of coordinates \code{a}, \code{b} and \code{c}, which
returns a numeric vector whose value at each coordinate will be depicted.}

\item{resolution}{The number of triangles whose base should lie on the longest
axis of the triangle.  Higher numbers will result in smaller subdivisions and smoother
colour gradients, but at a computational cost.}

\item{direction}{(optional) Integer specifying the direction that the current ternary plot
should point: 1, up; 2, right; 3, down; 4, left.}

\item{\dots}{Further parameters to pass to `\link[graphics]{contour}.}
}
\description{
Draws contour lines to depict the value of a function in ternary space.
}
\examples{
TernaryPlot(alab = 'a', blab = 'b', clab = 'c')
 
FunctionToContour <- function (a, b, c) {
  a - c + (4 * a * b) + (27 * a * b * c)
}

values <- TernaryPointValues(FunctionToContour, resolution = 24L)
ColourTernary(values)
TernaryContour(FunctionToContour, resolution = 36L)

# Note that FunctionToContour is sent a vector.
# Instead of
BadMax <- function (a, b, c) {
  max(a, b, c) 
}

# Use
GoodMax <- function (a, b, c) {
  pmax(a, b, c)
}
TernaryPlot(alab = 'a', blab = 'b', clab = 'c')
ColourTernary(TernaryPointValues(GoodMax))
TernaryContour(GoodMax)

# Or, for a generalizable example,
GeneralMax <- function (a, b, c) {
  apply(rbind(a, b, c), 2, max)
}
TernaryPlot(alab = 'a', blab = 'b', clab = 'c')
ColourTernary(TernaryPointValues(GeneralMax))
TernaryContour(GeneralMax)

}
\seealso{
Other contour plotting functions: 
\code{\link{ColourTernary}()},
\code{\link{TernaryDensityContour}()},
\code{\link{TernaryPointValues}()}
}
\author{
\href{https://orcid.org/0000-0001-5660-1727}{Martin R. Smith}
(\href{mailto:martin.smith@durham.ac.uk}{martin.smith@durham.ac.uk})
}
\concept{contour plotting functions}
